<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper 
namespace="com.mybatis3.dao.mapper.StudentMapper">
	<!-- ############################## resultMap정의 ############################# -->
	<resultMap  id="studentResultMap" type="com.mybatis3.domain.Student">
		<id column="STUD_ID" property="studId"/>
		<result column="NAME" property="name"/>
		<result column="EMAIL" property="email"/>
		<result column="DOB" property="dob"/>
	</resultMap>
	 
	<resultMap  id="studentWithAddressResultMap" type="com.mybatis3.domain.Student" autoMapping="true">
		<!-- 	
		<id column="STUD_ID" property="studId"/>
		<result column="NAME" property="name"/>
		<result column="EMAIL" property="email"/>
		<result column="DOB" property="dob"/> 
		-->
		<association property="address" javaType="com.mybatis3.domain.Address" autoMapping="true">
		<!-- association 안에 타입이 없어서 좀 다름. 자바타입이 들어감; 
			 association 는 조인에 의해 컬럼이 존재하면 다 뽑기 가능함 -->
		
			<!-- 			
			<id column="ADDR_ID" property="addrId"/>
			<result column="STREET" property="street"/>
			<result column="CITY" property="city"/>
			<result column="STATE" property="state"/>
			<result column="ZIP" property="zip"/>
			<result column="COUNTRY" property="country"/> 
			-->
		</association>
	</resultMap>	
	<resultMap id="studentWithCoursesResultMap"  type="com.mybatis3.domain.Student" autoMapping="true" >
		<result column="STUDENT_NAME" property="name"/>
	
		<collection property="courseList" ofType="com.mybatis3.domain.Course" autoMapping="true">
		<!-- ofType 특정객체 하위타입으로 들어갈때 사용 -->
			<id column="COURSE_ID" property="courseId"/>
			<result column="COURSE_NAME" property="name"/>	
		</collection>
	</resultMap>
	
	<!--
	<resultMap id="studentWithAddressAndCoursesResultMap" type="x" >
	</resultMap>	
	 -->
	<!-- ########################################################################### -->
	
	<!-- 
	/**************************************************
	1. SELECT[결과타입이 DTO[DTO List] 객체인경우] 
	**************************************************/
	-->
	<!-- 
		resultType :  Dto
	 -->
	<select id="findStudentById"  parameterType="java.lang.Integer" resultType="com.mybatis3.domain.Student">
	<!-- select 이외의 모든 sql에는 result 는 기술하지 않는다. result 는 select 문에만 기술한다.-->
	<!-- 
		resultType=" " List 와 dto 인경우 에 한개기술인지 여러개기술인지 차이남; 
					"" 안에는 List안에 있는 dto만 기술한다, List 는 기술안함, 알아서 알기때문
	-->
		select stud_id,name,email,dob from students 
		where stud_id=#{studId}
	</select>
	
	<select id="findAllStudents" resultType="com.mybatis3.domain.Student">
		select stud_id,name,email,dob from students
	</select>
	
	<!-- 
	  resultMap :  DTO
	 -->
	<select id="findStudentByIdResultMap"  parameterType="int"  resultMap="studentResultMap">
		select stud_id,name,email,dob from students 
		where stud_id=#{studId}
	</select>
	
	<select id="findAllStudentsResultMap" resultMap="studentResultMap" >
		select stud_id,name,email,dob from students
	</select>
	<!-- 
	/**********************************************************************
	 2. SELECT[결과타입이 Wrapper(String)[Wrapper(String) List]객체인경우] 
	*******************************************************************/
	/*
	 * resultType :  String,Wrapper,List<Wrapper>,List<String>
	 */
	  -->
	 <select id="findStudentNameById" >
	 	
	 </select> 
	 <select id="findStudentNameList" >
	 	
	 </select> 
	<!-- 
	/**************************************************
	 3. SELECT[student + address JOIN]( 1 : 1 )
	 **************************************************/
	/*
	 * resultMap : studentWithAddressResultMap
	 */
	 -->
	<select id="findStudentByIdWithAddress"  parameterType="int" resultMap="studentWithAddressResultMap">
		select stud_id, name, email,phone, a.addr_id, street, city, state, zip, country
  		FROM students s 
	    left outer join addresses a 
	    on s.addr_id=a.addr_id
	    where s.stud_id=#{addrId}
	</select>
	<!-- 
	/********************************************************************
	 4. SELECT[students + course_enrollment + course] JOIN( 1 : N )
	 ********************************************************************/
	/*
	 * resultMap : studentWithCoursesResultMap
	 */
	 -->
	<select id="findStudentByIdWithCourses"  parameterType="int"  resultMap="studentWithCoursesResultMap">
		select  s.stud_id,s.name as student_name ,s.email,s.phone,s.dob ,
        c.course_id,c.name as course_name ,c.description,c.start_date,c.end_date
		from students s 
		left outer join course_enrollment ce
		on s.stud_id = ce.stud_id
		left outer join courses c
		on ce.course_id=c.course_id where s.stud_id=#{studId}
	</select> 
	<!-- 
	/**************************************************
	 5. SELECT[students + address + courses[course_enrollment] JOIN( 1 : 1 : N )
	**************************************************/
	/*
	 * resultMap : studentWithAddressAndCoursesResultMap
	 */
	-->
	<select id="findStudentByIdWithAddressAndCourses"  >
			
	</select>
	<!-- 
	/**************************************************
						INSERT
	***************************************************/
		parameterType: DTO,VO,Domain
	 -->
	<insert id="insertStudentBySequence" parameterType="com.mybatis3.domain.Student">
		insert into students(stud_id, name, email, dob)
		values (students_stud_id_seq.nextval, #{name}, #{email}, #{dob})	
	</insert> 
	<insert id="insertStudentBySequenceReturnPrimaryKey" parameterType="com.mybatis3.domain.Student">
		
		<selectKey keyProperty="studId" order="BEFORE" resultType="int" > 
		<!-- 객체 이야기 나오면 무조건 Property -->
			select students_stud_id_seq.nextval from dual 
		</selectKey>
		
		insert into students(stud_id, name, email, dob)
		values (#{studId}, #{name}, #{email}, #{dob})	
	</insert>
	<!-- 
	/**************************************************
						UPDATE
	***************************************************/
		parameterType: DTO,VO,Domain
	 -->
	<update id="updateStudentById" parameterType="com.mybatis3.domain.Student">
		update students set name = #{name}, email = #{email}, dob = #{dob}
		where stud_id = #{studId}
	</update>
	
	<!-- 
	/**************************************************
						DELETE
	***************************************************/
		parameterType: java.lang.Integer,java.lang.String
	-->
	<delete id="deleteStudentById" parameterType="int">
		delete from students where stud_id=#{studId}
	</delete>
	
	<delete id="deleteStudentByName" parameterType="java.lang.String">
		delete from students where name=#{name}
	</delete>
	
	<delete id="deleteStudentByNameLike" parameterType="java.lang.String">
		delete from students where name like '%' || #{name} || '%'
	</delete>
	
	
	 
	 <!-- 
	/**************************************************
	 결과데이타를 Map(HashMap)에 담아서 반환할수있다
	***************************************************/
		resultType:Map,HashMap	
	-->
	<select id="findStudentByIdMap">
		
	</select>
	<select id="findAllStudentsMapList" >
		
	</select>
</mapper>