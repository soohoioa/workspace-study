AddressDao 클래스 작성 순서 ++ 

0. 테이블설계(create drop) 					-->address_table_create_drop.sql 파일생성

1. sql문작성(insert,update,delete,select)	-->addresss_insert_update_delete_select.sql 파일생성

2. Dto(VO)클래스작성 + 타입기술,인자받음

3. Dao클래스작성
 	- 테이블에 insert,delete,update,findByPk(반환 : dto),selectAll(dto컬렉션, dto리스트) 단위메쏘드만들기
    - 단위메쏘드(인자 반환타입정의)생성
    
4.<<< 반드시 테스트 되어야합니다.>>> 왜냐하면 여러개의 클래스를 사용할꺼라서
	public class AddressDaoTestMain{
		public static void main(String[] args){
		  AdderessDao adderssDao=new AdderessDao();
		  adderssDao.insert();
		} 
	}   
테스트 완료시 다음 작업으로 넘어간다.	


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
중요!! 여기서 오류 못찾는 경우 많으므로 주의!! 
Statement 사용시 처음에 안넣고 실행시 sql을 넣지만 PreparedStatement 는 처음에 sql을 넣고 실행시에는 안넣음


VO(Value Object)값을 가지는 객체, DTO(Data Transfer Object)데이터 옮기는 객체(계층(Layer)간 데이터를 교환하기 위한 객체)
 - address테이블 1개 row의 데이타의 값을 가지는객체
 - address테이블 1개 row의 데이타값을 전달(파라메타,리턴데이타)시키기위한객체
 - address테이블의 컬럼과 동일한수의 멤버필드를 가지는객체
  
  
DTO는 순수하게 데이터를 저장하고, 데이터에 대한 getter, setter 만을 가져야한다
DTO는 어떠한 비즈니스 로직을 가져서는 안되며, 저장, 검색, 직렬화, 역직렬화 로직만을 가져야 한다
직렬화는 DTO를 Byte, Json, Xml 등의 형태로 변환하는 것을 의미한다. 역직렬화는 그 반대를 의미한다.
데이터 캡슐화를 통해 유연한 대응이 가능하다.
VO 는 변하지 않는 값을 가지는 객체(불변성, immutable), 값이 변하지 않음을 보장하며 코드의 안정성과 생산성을 높인다.
VO 는 값이 같다면 동일한 객체이다.
 
	
	
-----------------------------------------------------
1. erd 를 먼저 생성을 한다.
2. ddl로 테이블을 설계한다.
3. 만들었던 ddl을 이용하여 sql문을 작성한다 왜냐하면 dao에 사용할꺼얏





CRUD
